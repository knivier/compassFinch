#BlueJ class context
comment0.target=Robot
comment0.text=\n\ This\ is\ an\ abstract\ class\ that\ is\ inherited\ by\ Microbit.java,\ Hummingbird.java\ and\ Finch.java.\n\ It\ includes\ methods\ to\ print\ on\ the\ micro\:bit\ LED\ array\ or\ set\ those\ LEDs\ individually.\ It\ also\n\ contains\ methods\ to\ read\ the\ values\ of\ the\ micro\:bit\ accelerometer\ and\ magnetometer.\n\ \n\ Mike\ Yuan\ and\ Bambi\ Breewer,\ BirdBrain\ Technologies\ LLC\n\ November\ 2018\n
comment1.params=
comment1.target=boolean\ isConnectionValid()
comment1.text=\ This\ function\ tests\ a\ connection\ by\ attempting\ to\ read\ whether\ or\ not\ the\ micro\:bit\ is\ shaking.\ \n\ Return\ true\ if\ the\ connection\ is\ good\ and\ false\ otherwise.\ \n
comment10.params=ledValues
comment10.target=void\ setDisplay(int[])
comment10.text=\n\ setDisplay\ lets\ the\ LED\ Array\ display\ a\ pattern\ based\ on\ an\ array\ of\ 1s\ and\ 0s.\n\n\ @param\ ledValues\ The\ list\ of\ integers\ that\ the\ function\ takes\ in\ to\ set\ the\ LED\ Array.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ 1\ means\ on\ and\ 0\ means\ off.\n
comment11.params=row\ column\ value
comment11.target=void\ setPoint(int,\ int,\ int)
comment11.text=\ This\ function\ turns\ on\ or\ off\ a\ single\ LED\ on\ the\ micro\:bit\ LED\ array.\ \n\ \n\ @param\ x\ The\ column\ of\ the\ LED\ (1-5)\n\ @param\ y\ The\ row\ of\ the\ LED\ (1-5)\n\ @param\ value\ The\ value\ of\ the\ LED\ (0\ for\ off,\ 1\ for\ on)\n
comment12.params=note\ beats
comment12.target=void\ playNote(int,\ double)
comment12.text=\n\ Set\ the\ buzzer\ to\ play\ the\ given\ note\ for\ the\ given\ duration\n\ @param\ note\ -\ midi\ note\ number\ to\ play\ (Range\:\ 32\ to\ 135)\n\ @param\ beats\ -\ duration\ in\ beats\ (Range\:\ 0\ to\ 16);\ each\ beat\ is\ one\ second\n
comment13.params=dir
comment13.target=double\ getAccelerationInDirs(java.lang.String)
comment13.text=\n\ getAccelerationInDirs\ returns\ acceleration\ value\ in\ a\ specified\ direction.\n\n\ @param\ dir\ The\ direction\ of\ which\ the\ acceleration\ will\ be\ returned.\n
comment14.params=dir
comment14.target=double\ getMagnetometerValInDirs(java.lang.String)
comment14.text=\n\ getMagnetometerValInDirs\ returns\ magnetometer\ value\ in\ a\ specified\ direction.\n\n\ @param\ dir\ The\ direction\ of\ which\ the\ magnetometer\ value\ will\ be\ returned.\n
comment15.params=
comment15.target=double[]\ getAcceleration()
comment15.text=\n\ getAcceleration\ returns\ accelerations\ in\ 3\ directions\ (X,Y,Z)\ in\ m/s^2.\n\n\ @return\ the\ accelerations\ in\ 3\ directions\ (X,Y,Z)\ in\ m/s^2.\n
comment16.params=
comment16.target=int[]\ getMagnetometer()
comment16.text=\n\ getMagnetometer\ returns\ magnetometer\ values\ in\ 3\ directions\ (X,Y,Z)\ in\ microT.\n\n\ @return\ the\ magnetometer\ values\ in\ 3\ directions\ (X,Y,Z)\ in\ microT.\n
comment17.params=
comment17.target=int\ getCompass()
comment17.text=\n\ getCompass\ returns\ the\ direction\ in\ degrees\ from\ north.\n\n\ @return\ the\ direction\ in\ degrees.\ (Range\:\ 0-360)\n
comment18.params=button
comment18.target=boolean\ getButton(java.lang.String)
comment18.text=\n\ getButton()\ takes\ in\ a\ button\ and\ checks\ whether\ it\ is\ pressed.\n\ The\ function\ shows\ a\ warning\ dialog\ if\ the\ inputs\ are\ not\ in\ the\ specified\ range.\n\n\ @param\ button\ the\ button\ that\ will\ be\ checked\ whether\ is\ it\ pressed\ or\ not.\ (Range\:\ "A",\ "B")\n\ @return\ true\ if\ the\ button\ is\ pressed\ and\ false\ otherwise.\n
comment19.params=
comment19.target=int\ getSound()
comment19.text=\n\ getSound()\ returns\ the\ current\ sound\ level\ from\ the\ micro\:bit\ sound\ sensor\n\ @return\ sound\ level\n
comment2.params=parameter\ inputMin\ inputMax
comment2.target=int\ clampParameterToBounds(int,\ int,\ int)
comment2.text=\ This\ function\ checks\ whether\ an\ input\ parameter\ is\ within\ the\ given\ bounds.\ If\ not,\ it\ prints\n\t\ \ \ a\ warning\ and\ returns\ a\ value\ of\ the\ input\ parameter\ that\ is\ within\ the\ required\ range.\nOtherwise,\ it\ just\ returns\ the\ initial\ value.
comment20.params=
comment20.target=int\ getTemperature()
comment20.text=\n\ getTemperature()\ returns\ the\ current\ temperature\ in\ degrees\ Celcius\ from\ the\ micro\:bit\ temperature\ sensor\n\ @return\ temperature\ in\ degrees\ Celcius\n
comment21.params=orientation
comment21.target=boolean\ getOrientationBoolean(java.lang.String)
comment21.text=\n\ getOrientationBoolean\ checks\ whether\ the\ device\ currently\ being\ held\ to\ a\ specific\ orientation\ or\ shaken.\n\n\ @param\ orientation\ The\ orientation\ that\ will\ be\ checked.\n\ @return\ "true"\ if\ the\ device\ is\ held\ to\ the\ orientation\ and\ false\ otherwise.\n
comment22.params=
comment22.target=boolean\ isShaking()
comment22.text=\ isShaking()\ tells\ you\ whether\ the\ micro\:bit\ is\ being\ shaken.\ \n\ \n\ @return\ a\ boolean\ value\ telling\ you\ the\ shake\ state\n
comment23.params=
comment23.target=java.lang.String\ getOrientation()
comment23.text=\n\ getOrientation()\ provides\ information\ about\ the\ device's\ current\ orientation.\n\n\ @return\ the\ orientation\ of\ the\ device.\ (Range\:\ Screen\ up,\ Screen\ down,\ Tilt\ left,\ Tilt\ right,\ Logo\ up,\ Logo\ down)\n
comment24.params=numSeconds
comment24.target=void\ pause(double)
comment24.text=Pauses\ the\ program\ for\ a\ time\ in\ seconds.
comment25.params=
comment25.target=void\ disconnect()
comment25.text=\n\ disconnect\ closes\ the\ http\ connection\ to\ save\ memory\n
comment26.params=
comment26.target=void\ stopAll()
comment26.text=stopAll()\ turns\ off\ all\ the\ outputs.
comment3.params=parameter\ inputMin\ inputMax
comment3.target=double\ clampParameterToBounds(double,\ double,\ double)
comment3.text=\ This\ function\ checks\ whether\ an\ input\ parameter\ is\ within\ the\ given\ bounds.\ If\ not,\ it\ prints\n\t\ \ \ a\ warning\ and\ returns\ a\ value\ of\ the\ input\ parameter\ that\ is\ within\ the\ required\ range.\nOtherwise,\ it\ just\ returns\ the\ initial\ value.
comment4.params=args
comment4.target=java.lang.String\ getUrl(java.lang.String[])
comment4.text=\n\ Create\ a\ url\ string\ given\ a\ list\ of\ arguments\ to\ include\n\ @param\ args\n\ @return\n
comment5.params=URLRequest
comment5.target=java.lang.String\ sendHttpRequest(java.lang.String)
comment5.text=\n\ General\ function\ for\ sending\ an\ http\ request\ and\ returning\ the\ response\n\ @param\ URLRequest\n\ @return\ String\ response\n
comment6.params=URLRequest
comment6.target=void\ httpRequestOut(java.lang.String)
comment6.text=\ This\ function\ sends\ http\ requests\ that\ set\ outputs\ (lights,\ motors,\ buzzer,\ \netc.)\ on\ the\ micro\:bit\ and\ Hummingbird.
comment7.params=URLRequest
comment7.target=double\ httpRequestInDouble(java.lang.String)
comment7.text=This\ function\ sends\ http\ requests\ that\ return\ a\ double\ response\ from\ a\ sensor.
comment8.params=URLRequest
comment8.target=boolean\ httpRequestInBoolean(java.lang.String)
comment8.text=This\ function\ sends\ http\ requests\ that\ return\ a\ boolean\ response\ from\ a\ sensor.
comment9.params=message
comment9.target=void\ print(java.lang.String)
comment9.text=\n\ print()\ lets\ the\ LED\ Array\ display\ a\ given\ message.\n\n\ @param\ message\ The\ message\ that\ will\ be\ displayed\ on\ the\ LED\ Array.\n
numComments=27
