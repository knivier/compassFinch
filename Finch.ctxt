#BlueJ class context
comment0.target=Finch
comment0.text=\n\ This\ class\ extends\ the\ Robot\ class\ to\ incorporate\ functions\ to\ control\ the\ inputs\ and\ outputs\n\ of\ the\ Finch.\ It\ includes\ methods\ to\ set\ the\ values\ of\ motors\ and\ LEDs,\ as\ well\n\ as\ methods\ to\ read\ the\ values\ of\ the\ sensors.\n\n\ Krissie\ Lauwers,\ BirdBrain\ Technologies\ LLC\n\ October\ 2019\n
comment1.params=
comment1.target=Finch()
comment1.text=\n\ Default\ constructor\ for\ the\ library.\ Set\ the\ default\ device\ to\ be\ A.\n
comment10.params=
comment10.target=void\ stop()
comment10.text=\n\ Stop\ the\ finch\ motors\n
comment11.params=port\ redIntensity\ greenIntensity\ blueIntensity
comment11.target=void\ setTriLED(int,\ int,\ int,\ int)
comment11.text=\n\ Private\ method\ to\ set\ led\ intensity.\ Used\ to\ set\ beak\ and\ tail\ leds.\n\ @param\ port\ -\ led\ to\ set.\ 1\ is\ beak.\ 2-5\ are\ tail.\ 6\ sets\ entire\ tail.\ (Range\:\ 1\ to\ 6)\n\ @param\ redIntensity\ -\ red\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ greenIntensity\ -\ green\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ blueIntensity\ -\ blue\ intensity\ (Range\:\ 0\ to\ 100)\n
comment12.params=red\ green\ blue
comment12.target=void\ setBeak(int,\ int,\ int)
comment12.text=\n\ Set\ the\ finch\ beak\ to\ the\ given\ rgb\ color.\n\ @param\ red\ -\ red\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ green\ -\ green\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ blue\ -\ blue\ intensity\ (Range\:\ 0\ to\ 100)\n
comment13.params=ledNum\ red\ green\ blue
comment13.target=void\ setTail(int,\ int,\ int,\ int)
comment13.text=\n\ Set\ the\ specified\ tail\ led\ to\ the\ specified\ rgb\ color.\n\ @param\ ledNum\ -\ led\ to\ set\ (Range\:\ 1\ to\ 4)\n\ @param\ red\ -\ red\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ green\ -\ green\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ blue\ -\ blue\ intensity\ (Range\:\ 0\ to\ 100)\n
comment14.params=ledNum\ red\ green\ blue
comment14.target=void\ setTail(java.lang.String,\ int,\ int,\ int)
comment14.text=\n\ Set\ all\ tail\ leds\ to\ the\ specified\ rgb\ color.\n\ @param\ ledNum\ -\ String\ which\ must\ be\ specified\ as\ 'all'\n\ @param\ red\ -\ red\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ green\ -\ green\ intensity\ (Range\:\ 0\ to\ 100)\n\ @param\ blue\ -\ blue\ intensity\ (Range\:\ 0\ to\ 100)\n
comment15.params=
comment15.target=void\ resetEncoders()
comment15.text=\n\ Reset\ the\ finch\ encoder\ values\ to\ 0.\n
comment16.params=sensor\ port
comment16.target=double\ getSensor(java.lang.String,\ java.lang.String)
comment16.text=\n\ Private\ function\ to\ get\ the\ value\ of\ a\ sensor\n\ @param\ sensor\ -\ Light,\ Distance,\ Line,\ or\ Encoder\n\ @param\ port\ -\ Right,\ Left,\ or\ static\n\ @return\ -\ sensor\ value\ returned\ by\ bluebird\ connector\ or\ -1\ in\ the\ case\ of\ a\ problem.\n
comment17.params=direction
comment17.target=double\ getEncoder(java.lang.String)
comment17.text=\n\ Get\ the\ current\ value\ of\ the\ right\ or\ left\ encoder\n\ @param\ direction\ -\ R\ or\ L\ to\ specify\ right\ or\ left\n\ @return\ -\ encoder\ value\ in\ rotations\n
comment18.params=
comment18.target=int\ getDistance()
comment18.text=\n\ Get\ the\ current\ value\ of\ the\ finch\ distance\ sensor\n\ @return\ -\ the\ distance\ to\ the\ closest\ obstacle\ in\ cm\n
comment19.params=direction
comment19.target=int\ getLight(java.lang.String)
comment19.text=\n\ Get\ the\ current\ value\ of\ the\ specified\ finch\ light\ sensor\n\ @param\ direction\ -\ R\ or\ L\ to\ specify\ right\ or\ left\n\ @return\ -\ brightness\ as\ a\ value\ 0-100\n
comment2.params=device
comment2.target=Finch(java.lang.String)
comment2.text=\n\ General\ constructor\ for\ the\ library.\ Set\ the\ device\ to\ be\ "A",\ "B",\ or\ "C".\n\n\ @param\ device\ The\ letter\ corresponding\ to\ the\ Hummingbird\ device,\ which\ much\ be\ "A",\ "B",\ or\ "C".\n\ The\ letter\ that\ identifies\ the\ Hummingbird\ device\ is\ assigned\ by\ the\ BlueBird\ Connector.\n
comment20.params=direction
comment20.target=int\ getLine(java.lang.String)
comment20.text=\n\ Get\ the\ current\ value\ of\ the\ specified\ finch\ line\ sensor.\n\ Return\ value\ is\ inverted\ (100\ -\ value)\ so\ that\ more\ reflected\n\ light\ \=\ bigger\ number\n\ @param\ direction\ -\ R\ or\ L\ to\ specify\ right\ or\ left\n\ @return\ -\ brightness\ as\ a\ value\ 0-100\n
comment21.params=orientation
comment21.target=boolean\ getOrientationBoolean(java.lang.String)
comment21.text=\n\ Checks\ whether\ or\ not\ the\ finch\ is\ in\ the\ given\ orientation.\n\n\ @param\ orientation\ -\ Orientation\ to\ check\n\ @return\ -\ True\ iff\ the\ finch\ is\ in\ the\ given\ orientation\n
comment22.params=
comment22.target=java.lang.String\ getOrientation()
comment22.text=\n\ getOrientation()\ provides\ information\ about\ the\ finch's\ current\ orientation.\n\ This\ function\ overrides\ the\ function\ in\ the\ Robot\ class\ so\ that\ results\ are\n\ in\ the\ finch\ reference\ frame.\n\n\ @return\ the\ orientation\ of\ the\ finch.\ (Range\:\ Beak\ up,\ Beak\ down,\ Tilt\ left,\ Tilt\ right,\ Level,\ Upside\ down)\n
comment23.params=
comment23.target=boolean\ isBeakUp()
comment24.params=
comment24.target=boolean\ isLevel()
comment25.params=
comment25.target=boolean\ isUpsideDown()
comment26.params=
comment26.target=boolean\ isBeakDown()
comment27.params=
comment27.target=boolean\ isTiltedLeft()
comment28.params=
comment28.target=boolean\ isTiltedRight()
comment3.params=
comment3.target=boolean\ isFinch()
comment3.text=\n\ This\ function\ sends\ a\ request\ to\ BlueBird\ Connector\ to\ determine\ whether\ or\ not\n\ the\ device\ is\ a\ Finch.\n
comment4.params=direction
comment4.target=java.lang.String\ formatForwardBackward(java.lang.String)
comment4.text=\n\ Formats\ the\ direction\ string\ for\ sending\ to\ the\ bluebird\ connector.\n\ If\ the\ selection\ made\ is\ not\ acceptable,\ returns\ 'Neither'.\n\ @param\ direction\n\ @return\n
comment5.params=direction
comment5.target=java.lang.String\ formatRightLeft(java.lang.String)
comment5.text=\n\ Formats\ the\ direction\ string\ for\ sending\ to\ the\ bluebird\ connector.\n\ If\ the\ selection\ made\ is\ not\ acceptable,\ returns\ 'Neither'.\n\ @param\ direction\n\ @return\n
comment6.params=motion\ direction\ length\ speed
comment6.target=void\ moveFinchAndWait(java.lang.String,\ java.lang.String,\ double,\ double)
comment6.text=\n\ Send\ a\ command\ to\ move\ the\ finch\ and\ wait\ until\ the\ finch\ has\ finished\n\ its\ motion\ to\ return.\ Used\ by\ setMove\ and\ setTurn.\n\ @param\ motion\ -\ Move\ or\ turn\n\ @param\ direction\ -\ forward,\ backward,\ right\ or\ left\n\ @param\ length\ -\ Length\ of\ travel\ (distance\ or\ angle)\n\ @param\ speed\ -\ Speed\ as\ a\ percent\ (Range\:\ 0\ to\ 100)\n
comment7.params=direction\ distance\ speed
comment7.target=void\ setMove(java.lang.String,\ double,\ double)
comment7.text=\n\ Sends\ a\ request\ for\ the\ finch\ to\ move\ forward\ or\ backward\ a\ given\ distance\n\ at\ a\ given\ speed.\ Direction\ should\ be\ specified\ as\ "F"\ or\ "B".\n\ @param\ direction\ -\ F\ or\ B\ for\ forward\ or\ backward\n\ @param\ distance\ -\ Distance\ to\ travel\ in\ cm.\ (Range\:\ 0\ to\ 500)\n\ @param\ speed\ -\ Speed\ as\ a\ percent\ (Range\:\ 0\ to\ 100)\n
comment8.params=direction\ angle\ speed
comment8.target=void\ setTurn(java.lang.String,\ double,\ double)
comment8.text=\n\ Sends\ a\ request\ for\ the\ finch\ to\ turn\ right\ or\ left\ to\ the\ give\ angle\n\ at\ the\ given\ speed.\n\ @param\ direction\ -\ R\ or\ L\ for\ right\ or\ left\n\ @param\ angle\ -\ Angle\ of\ the\ turn\ in\ degrees\ (Range\:\ 0\ to\ 360)\n\ @param\ speed\ -\ Speed\ of\ the\ turn\ as\ a\ percent\ (Range\:\ 0\ to\ 100)\n
comment9.params=leftSpeed\ rightSpeed
comment9.target=void\ setMotors(double,\ double)
comment9.text=\n\ Set\ the\ right\ and\ left\ motors\ of\ the\ finch\ to\ the\ speeds\ given.\n\ @param\ leftSpeed\ -\ Speed\ as\ a\ percent\ (Range\:\ 0\ to\ 100)\n\ @param\ rightSpeed\ -\ Speed\ as\ a\ percent\ (Range\:\ 0\ to\ 100)\n
numComments=29
